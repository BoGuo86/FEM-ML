{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1cdfff5c780>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''\n",
    "Regression\n",
    "Last Updated : 03/28/2019, by Hyungmin Jun (hyungminjun@outlook.com)\n",
    "\n",
    "=============================================================================\n",
    "\n",
    "Regression using Keras\n",
    "Copyright 2019 Hyungmin Jun. All rights reserved.\n",
    "\n",
    "License - GPL version 3\n",
    "This program is free software: you can redistribute it and/or modify it under\n",
    "the terms of the GNU General Public License as published by the Free Software\n",
    "Foundation, either version 3 of the License, or any later version. This\n",
    "program is distributed in the hope that it will be useful, but WITHOUT ANY\n",
    "WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n",
    "A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n",
    "You should have received a copy of the GNU General Public License along with\n",
    "this program. If not, see <http://www.gnu.org/licenses/>.\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1cdfff5c780>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from keras.layers import Dense, Input\n",
    "from keras.models import Model, Sequential\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "X = np.linspace(1, 10, 1000)\n",
    "Y = 2 * X + 1\n",
    "\n",
    "plt.plot(X, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndense_4 (Dense)              (None, 1)                 2         \n=================================================================\nTotal params: 2\nTrainable params: 2\nNon-trainable params: 0\n_________________________________________________________________\nWARNING:tensorflow:From C:\\Users\\hyung\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.cast instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r  32/1000 [..............................] - ETA: 4s - loss: 274.4158"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 156us/step - loss: 9.6169\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0501"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0447\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0345"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0353\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0279"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 31us/step - loss: 0.0282\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0284"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0224\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0141"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0178\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0133"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0142\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0134"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 31us/step - loss: 0.0111\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0100"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0089\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0094"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0071\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0057"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0056\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0044"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0045\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0030"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0036\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0037"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 31us/step - loss: 0.0028\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0024"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0022\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0022"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0018\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0012"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0014\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0017"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 0.0011\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 0.0011"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r1000/1000 [==============================] - 0s 18us/step - loss: 8.9286e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 8.7180e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 7.1503e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 6.6904e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 31us/step - loss: 5.6306e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 4.6981e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r1000/1000 [==============================] - 0s 16us/step - loss: 4.4875e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 5.4621e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 3.5791e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 3.3015e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 2.8649e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25/30\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r  32/1000 [..............................] - ETA: 0s - loss: 1.9439e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 2.3214e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 2.5616e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r1000/1000 [==============================] - 0s 16us/step - loss: 1.8057e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 27/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 1.8730e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 1.4502e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 28/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 1.8104e-04"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r1000/1000 [==============================] - 0s 16us/step - loss: 1.1529e-04\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 29/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 9.7578e-05"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 9.1768e-05\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 30/30\n\r  32/1000 [..............................] - ETA: 0s - loss: 6.5917e-05"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1000/1000 [==============================] - 0s 16us/step - loss: 7.3003e-05\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(1, activation='linear', input_shape=(1,)))\n",
    "model.summary()\n",
    "\n",
    "model.compile(loss='mse', optimizer='sgd')\n",
    "hist = model.fit(X, Y, epochs=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<keras.callbacks.History object at 0x000001CD810CAEB8>\n[array([[2.002747]], dtype=float32), array([0.9814033], dtype=float32)]\n"
     ]
    }
   ],
   "source": [
    "print(hist)\n",
    "print(model.get_weights())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[25.014368]\n [29.019863]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1cd812f9da0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred_X = []\n",
    "pred_X = np.append(pred_X, 12)\n",
    "pred_X = np.append(pred_X, 14)\n",
    "\n",
    "pred_Y = model.predict(pred_X)\n",
    "print(pred_Y)\n",
    "\n",
    "plt.scatter(X, Y)\n",
    "plt.scatter(pred_X, pred_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
